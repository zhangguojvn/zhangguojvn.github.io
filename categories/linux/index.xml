<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on 张某的博客</title>
    <link>https://zhangguojvn.github.io/categories/linux/</link>
    <description>Recent content in Linux on 张某的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 30 Dec 2022 17:22:29 +0800</lastBuildDate><atom:link href="https://zhangguojvn.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ZFS 学习笔记</title>
      <link>https://zhangguojvn.github.io/posts/zfs-note/</link>
      <pubDate>Fri, 30 Dec 2022 17:22:29 +0800</pubDate>
      
      <guid>https://zhangguojvn.github.io/posts/zfs-note/</guid>
      <description>非特权用户使用 Xorg</description>
    </item>
    
    <item>
      <title>Linux 设置弱密码</title>
      <link>https://zhangguojvn.github.io/posts/linux-set-weak-password/</link>
      <pubDate>Mon, 15 Aug 2022 23:27:26 +0800</pubDate>
      
      <guid>https://zhangguojvn.github.io/posts/linux-set-weak-password/</guid>
      <description>Linux 设置弱密码。</description>
    </item>
    
    <item>
      <title>在Dracut使用GPG解密硬盘</title>
      <link>https://zhangguojvn.github.io/posts/decrypting-hard-drives-with-gpg-in-dracut/</link>
      <pubDate>Sat, 25 Jun 2022 17:20:57 +0800</pubDate>
      
      <guid>https://zhangguojvn.github.io/posts/decrypting-hard-drives-with-gpg-in-dracut/</guid>
      <description>配置加密 将配置写入 /etc/crypttab ,将$name $uuid $keyfile 替换为自己的配置, keyfile 为.gpg 结尾时,会启用 crypt-gpg.
/etc/crypttab ----- $name UUID=$uuid $keyfile 设置公钥 将公钥放入 /etc/dracut.conf.d/crypt-public-key.gpg
设置 dracut.conf 需要手动加入 crypt-gpg 模块,将 $keyfile 替换为自己的密钥
/etc/dracut.conf ----- hostonly=&amp;#34;no&amp;#34; install_items+=&amp;#34; /etc/crypttab $keyfile &amp;#34; add_dracutmodules=&amp;#34; crypt-gpg &amp;#34; </description>
    </item>
    
    <item>
      <title>将密钥封存至 TPM</title>
      <link>https://zhangguojvn.github.io/posts/seal-the-key-to-the-tpm/</link>
      <pubDate>Sat, 25 Jun 2022 14:50:51 +0800</pubDate>
      
      <guid>https://zhangguojvn.github.io/posts/seal-the-key-to-the-tpm/</guid>
      <description>创建主键 tpm2_createprimary -Q -C o -c ~/tpm/primary.context 创建当前 TPM 的签名 （可选） pcr_bank 可选 sha1 sha256 pcr_id 功能如下表,一般来说 &amp;ldquo;0,1,3,7&amp;rdquo; 即可
PCR USE NOTES PCR0 核心系统固件可执行代码（又名固件） 如果您升级 UEFI，可能会发生变化 PCR1 核心系统固件数据（又名 UEFI 设置） PCR2 扩展或可插入的可执行代码 PCR3 扩展或可插拔固件数据 在 Boot Device Select UEFI 引导阶段设置 PCR4 引导管理器代码和引导尝试 测量引导管理器和固件尝试从中引导的设备 PCR5 引导管理器配置和数据 可以测量引导加载程序的配置；包括 GPT 分区表 PCR6 从 S4 和 S5 电源状态事件恢复 PCR7 安全启动状态 包含 PK/KEK/db 的全部内容，以及用于验证每个启动应用程序的特定证书 PCR8 内核命令行的哈希 由grub和systemd-boot支持 PCR9 initrd 的哈希 预定 linux v5.17 PCR10 保留供将来使用 PCR11 BitLocker 访问控制 PCR12 数据事件和高波动事件 PCR13 引导模块详细信息 PCR14 引导权限 PCR15-23 保留供将来使用 tpm2_pcrread -Q &amp;#34;sha256&amp;#34;:&amp;#34;0,1,2,3,7&amp;#34; -o &amp;#34;$TMP&amp;#34;/pcr.</description>
    </item>
    
    <item>
      <title>使用 Grub 构建统一内核映像</title>
      <link>https://zhangguojvn.github.io/posts/building-a-unified-kernel-image-with-grub/</link>
      <pubDate>Sat, 25 Jun 2022 12:40:51 +0800</pubDate>
      
      <guid>https://zhangguojvn.github.io/posts/building-a-unified-kernel-image-with-grub/</guid>
      <description>统一内核映像是单个可执行文件，可以直接从 UEFI 固件启动，或者由引导加载程序自动获取，只需很少或没有配置。
准备 Grub 配置文件 此配置文件和普通 Grub 配置文件一样，一下只是适配我电脑的配置,默认情况下 Grub 的 root 为 (memdisk).
~/SecureBoot/grub.cfg ----- menuentry &amp;#39;Gentoo&amp;#39; --class gentoo --class gnu-linux --class gnu --class os{ insmod all_video linux /vmlinuz root=/dev/sda1 initrd /initramfs.img } 构建 EFI 文件 使用 grub-mkstandalone 构建单一的内核映像, 将命令中的 vmlinuz-5.15.41-gentoo 以及 iniramfs-5.14.41-gentoo 替换为自己的内核及 initramfs.
grub-mkstandalone --direcotry /usr/lib/grub/x86_64-efi --format x86_64-efi --disable-shim-lock --output grub.efi /vmlinuz=/boot/vmlinuz-5.15.41-gentoo /initramfs.img=/boot/initramfs-5.14.41-gentoo /boot/grub/grub.cfg=~/SecureBoot/grub.cfg 签名 EFI 文件 (可选) 如果使用了安全启动，可以对 EFI 文件进行签名.
sbsign --key ~/keys/db.key --cert ~/keys/db.crt --output grub.</description>
    </item>
    
    <item>
      <title>Dracut 原生挂载 OverlayFS Root</title>
      <link>https://zhangguojvn.github.io/posts/dracut-%E5%8E%9F%E7%94%9F%E6%8C%82%E8%BD%BD-overlayfs-root/</link>
      <pubDate>Thu, 12 May 2022 23:40:37 +0800</pubDate>
      
      <guid>https://zhangguojvn.github.io/posts/dracut-%E5%8E%9F%E7%94%9F%E6%8C%82%E8%BD%BD-overlayfs-root/</guid>
      <description>Dracut 配置 需要手动导入模块，不可以使用hostonly模式，即配置中hostonly=&amp;quot;no&amp;quot;。
/etc/dracut.conf ---------- hostonly=&amp;#34;no&amp;#34; add_drivers+=&amp;#34; squashfs overlay &amp;#34; add_dracutmodules+=&amp;#34; dmsquash-live &amp;#34; 因为关闭了 hostonly 模式，所以 lvm 等配置需要手动写入内核参数。
准备镜像 镜像可以放入可挂载文件系统，或直接烧录进分区。在此介绍放入挂载文件系统情况。
镜像内部至少需要 proc,sys,dev。其中 90dmsquash-live 使用 /proc 检测是否为正确的系统格式。98dracut-systemd 使用 usable_root() 函数，该函数使用 /proc,/sys,/dev 检测是否和正确的系统格式。建议也创建 /run 文件夹。
镜像放在内核参数&amp;lt;rd.live.dir&amp;gt;/&amp;lt;rd.live.squashimg&amp;gt;。这两个参数默认值为 LiveOS 和 squashfs.img 即默认放入 LiveOS/squashfs.img 即可。
OverlayFS 持久化分区准备 该分区需要在根目录下创建内核参数 &amp;lt;rd.live.overlay&amp;gt; 目录作为 upperdir。并且在上级目录创建 ovlwork 文件夹作为 workdir。&amp;lt;rd.live.overlay&amp;gt;默认为`/&amp;lt;rd.live.dir&amp;gt;/overlay--&amp;quot;,其中LABEL和UUID为ROOT分区的LABEL和UUID。持久化不仅可以用文件夹，也可以使用文件，在此不介绍。
内核参数 root=live:分区: 存放镜像的分区。 rd.live.overlay=分区:目录: OverlayFS 的 upperdir，目录必须由/开头。 rootfstype=ext4: root 分区的文件类型。 </description>
    </item>
    
    <item>
      <title>Dracut 开机自动创建 Lvm 快照</title>
      <link>https://zhangguojvn.github.io/posts/dracut-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA-lvm-%E5%BF%AB%E7%85%A7/</link>
      <pubDate>Sat, 30 Apr 2022 17:09:57 +0800</pubDate>
      
      <guid>https://zhangguojvn.github.io/posts/dracut-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA-lvm-%E5%BF%AB%E7%85%A7/</guid>
      <description>Dracut-056之前版本 内核参数加入以下参数即可,其中 ORIG_LV 为快照源, SNAP_LV 为快照名.每次启动都会删除 SNAP_LV 并创建新的 SNAP_LV .
rd.lvm.snapshot=&amp;#34;ORIG_LV:SNAP_LV&amp;#34; Dracut-056及之后版本 在Dracut-056中删除了快照功能，需要自己创建快照脚本。</description>
    </item>
    
    <item>
      <title>非特权用户使用 Xorg</title>
      <link>https://zhangguojvn.github.io/posts/%E9%9D%9E%E7%89%B9%E6%9D%83%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8-xorg/</link>
      <pubDate>Wed, 20 Apr 2022 19:29:29 +0800</pubDate>
      
      <guid>https://zhangguojvn.github.io/posts/%E9%9D%9E%E7%89%B9%E6%9D%83%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8-xorg/</guid>
      <description>非特权用户使用 Xorg</description>
    </item>
    
    <item>
      <title>自签名安全启动 Grub 设置</title>
      <link>https://zhangguojvn.github.io/posts/%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E5%85%A8%E5%90%AF%E5%8A%A8-grub-%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Wed, 20 Apr 2022 03:50:51 +0800</pubDate>
      
      <guid>https://zhangguojvn.github.io/posts/%E8%87%AA%E7%AD%BE%E5%90%8D%E5%AE%89%E5%85%A8%E5%90%AF%E5%8A%A8-grub-%E8%AE%BE%E7%BD%AE/</guid>
      <description>自签名安全启动记录</description>
    </item>
    
  </channel>
</rss>
